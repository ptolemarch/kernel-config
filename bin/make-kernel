#! /bin/bash
# vim: ts=2 sw=2 et ai

# `make` but then save the build directory

# eventually, I'd like to augment this script with my own _warn(), etc.
                # stop the script immediately if
set -o errexit  #   any command returns an error
set -o pipefail #   ... even if that command isn't at the end of its pipeline
set -o nounset  #   unset variables are expanded

#set -o verbose  # as I'm debugging this script, anyway

hsk="${SUROS_KERNEL_DIR:-$HOME/kernel}" ; hsk=${hsk%/}

cd "$hsk"

kernel_build_error() {
  local parent_lineno="$1"
  local message="${2:-}"
  local code="${3:-1}"

  cat >&2 <<ERRMSG
ALERT: Build did not complete, and build output did NOT get copied
from
  $hsk/tmp
to
  $hsk/build

Error line number: [$parent_lineno]
Error message:     [$message]
Error code:        [$code]
ERRMSG

  exit $code
}
trap 'kernel_build_error ${LINENO}' ERR


# KBUILD_OUTPUT used for built kernel and modules
if [[ -n $KBUILD_OUTPUT ]] ; then :; else
  cat >&2 <<ERRMSG
I was expecting the environment variable
  \$KBUILD_OUTPUT
to be set, probably as
  KBUILD_OUTPUT="$hsk/tmp"
But it was not. Unable to continue without that set.
ERRMSG
  exit 1
fi

# make sure that ${hsk}/tmp is mounted tmpfs
# but, first, it would be weird if the parent were a tmpfs
hsk_fs="$(df -T "$hsk" | tail -n 1 | awk '{print $2}')"
if [[ $hsk_fs == "tmpfs" && -z $WHOLE_KERNEL_IS_TMPFS ]] ; then
  cat >&2 <<ERRMSG
directory ${hsk} is a tmpfs. This is weird.

If this is what you expected, set WHOLE_KERNEL_IS_TMPFS and try again.
ERRMSG
  exit 1
fi
hskt_fs="$(df -T "$hsk/tmp" | tail -n 1 | awk '{print $2}')"
if [[ $hskt_fs == "tmpfs" ]]; then :; else
  fs_file="${hsk}/tmp"
  fs_spec=${fs_file#/} ; fs_spec=${fs_spec//\//_} fs_spec="/tmpfs/$fs_spec"
  uid=$(id -u)
  gid=$(id -g)
  cat >&2 <<ERRMSG
directory ${fs_file} isn't a tmpfs

You might want to fix this using something like:
  mount \\
    -t tmpfs \\
    -o rw,noatime,nodiratime,nodev,uid=$uid,gid=$gid,mode=755 \\
    $fs_spec \\
    $fs_file
ERRMSG
  exit 1
fi

# tmp/ shouldn't be empty
if ls "$hsk/tmp" > /dev/null ; then :; else
  cat >&2 <<ERRMSG
directory ${hsk}/tmp is empty
filling it with the contents of ${hsk}/build
ERRMSG
  cp -vaT "$hsk/build" "$hsk/tmp" >&2
fi
# NOW tmp/ REALLY shouldn't be empty
if ls "$hsk/tmp" > /dev/null ; then :; else
  cat >&2 <<ERRMSG
directory ${hsk}/tmp is STILL empty
(even after filling it with the contents of ${hsk}/build)
I don't think this is what you want
ERRMSG
  exit 1
fi

start_seconds=$SECONDS
cd linux
# build kernel
num_processors=$(grep '^processor[[:space:]]*:' /proc/cpuinfo | wc -l)
time make -j$(( num_processors + 1 ))
cd "$hsk"
end_seconds=$SECONDS

duration=$(( end_seconds - start_seconds ))
echo -n "duration: " ; date -d@$duration -u +"%H:%M:%S"
echo -n "end: " ; date

# copy build output
if [[ -a "$hsk/build" ]]; then
  echo "confirm we should delete '$hsk/build':" >&2
  rm -Ir "$hsk/build"  # first, remove what's there
fi
cp -a "$hsk/tmp" "$hsk/build"
