#! /bin/bash
# vim: ts=2 sw=2 et ai

# `make` but then save the build directory

# eventually, I'd like to augment this script with my own _warn(), etc.
                # stop the script immediately if
set -o errexit  #   any command returns an error
set -o pipefail #   ... even if that command isn't at the end of its pipeline
set -o nounset  #   unset variables are expanded

#set -o verbose  # as I'm debugging this script, anyway

hsk="${SUROS_KERNEL_DIR:-$HOME/kernel}" ; hsk=${hsk%/}

kernel_build_error() {
  local parent_lineno="$1"
  local message="$2"
  local code="${3:-1}"

  cat >&2 <<ERRMSG
ALERT: Build did not complete, and build output did NOT get copied
from
  $hsk/tmp
to
  $hsk/build

Error line number: [$parent_lineno]
Error message:     [$message]
Error code:        [$code]
ERRMSG

  exit $code
}
trap 'kernel_build_error ${LINENO}' ERR


## TODO: This test is probably is neurotic and overwrought
#if [[ -n $KBUILD_OUTPUT && $KBULID_OUTPUT != "$hsk/tmp" ]] ; then
#  cat >&2 <<ERRMSG
#env var \$KBUILD_OUTPUT is set to
#  $KBUILD_OUTPUT
#but this script was about to set it to
#  $hsk/tmp
#and I'm just gonna stop here until you change it, because I'm not
#sure what else to do here, right now. :-b
#ERRMSG
#  exit 1
#fi

# use $hsk
export KBUILD_OUTPUT="$hsk/tmp"
cd "$hsk"

# make sure config is already checked in
cd config
if git diff-index --quiet HEAD --; then :; else
  cat >&2 <<ERRMSG
git repository in ${hsk}/config has uncommitted changes
ERRMSG
  exit 1
fi
cd ..

# make sure that ${hsk}/tmp is mounted tmpfs
# but, first, it would be weird if the parent is a tmpfs
hsk_fs="$(df -T "$hsk" | tail -n 1 | awk '{print $2}')"
if [[ $hsk_fs == "tmpfs" && -z $WHOLE_KERNEL_IS_TMPFS ]] ; then
  cat >&2 <<ERRMSG
directory ${hsk} is a tmpfs. This is weird.

If this is what you expected, set WHOLE_KERNEL_IS_TMPFS and try again.
ERRMSG
  exit 1
fi

hskt_fs="$(df -T "$hsk/tmp" | tail -n 1 | awk '{print $2}')"
if [[ $hskt_fs == "tmpfs" ]]; then :; else
  fs_file="${hsk}/tmp"
  fs_spec=${fs_file#/} ; fs_spec=${fs_spec//\//_} fs_spec="/tmpfs/$fs_spec"
  uid=$(id -u)
  gid=$(id -g)
  cat >&2 <<ERRMSG
directory ${fs_file} isn't a tmpfs

You might want to fix this using something like:
  mount \\
    -t tmpfs \\
    -o rw,noatime,nodiratime,nodev,uid=$uid,gid=$gid,mode=755 \\
    $fs_spec \\
    $fs_file
ERRMSG
  exit 1
fi

# TODO: This test is probably is neurotic and overwrought
#  particularly since it probably makes the most sense to simply delete
#  it and re-create it
# make sure that ${hsk}/build exists, since this is where portage
# will be looking for it, later
#if [[ -d "$hsk/build" 
#   && -r "$hsk/build" 
#   && -w "$hsk/build" 
#   && -x "$hsk/build" 
#]]; then :; else
#  cat >&2 <<ERRMSG
#directory $hsk/build doesn't exist or lacks an essential permission.
#
#Assuming it doesn't already exist, maybe try:
#  mkdir -m755 "$hsk/build"
#ERRMSG
#  exit 1
#fi

start_seconds=$SECONDS
cd linux
# build kernel
num_processors=$(grep '^processor[[:space:]]*:' /proc/cpuinfo | wc -l)
make -j$(( num_processors + 1 ))
cd "$hsk"
end_seconds=$SECONDS

duration=$(( end_seconds - start_seconds ))
echo -n "duration: " ; date -d@$duration -u +"%j days, %H:%M:%S"
echo -n "end: " ; date

# copy build output
echo "confirm we should delete '$hsk/build':" >&2
rm -Ir "$hsk/build"  # first, remove what's there
cp -a "$hsk/tmp" "$hsk/build"
